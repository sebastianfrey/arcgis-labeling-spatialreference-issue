import{W as s,ap as n,a1 as d,e6 as u,a2 as l}from"./index-BFudLC3v.js";import{d as g}from"./FeatureLayerView2D-Ch92i_V1.js";import"./EffectView-BWsWT5Ex.js";import"./timeSupport-CpXhYxLx.js";import"./AttributeBinsFeatureSet-Bc4E4XsZ.js";import"./AttributeBinsQuery-DOCe9FcU.js";import"./queryUtils-DcjIa_4-.js";import"./json-Wa8cmqdu.js";import"./FixedIntervalBinParameters-Cti191uy.js";import"./LayerView-BFbj4cbk.js";import"./Container-cpXLYO26.js";import"./layerViewUtils-B4pbvQOn.js";import"./TechniqueInstance-DUZJkAbd.js";import"./UpdateTracking2D-DEpZGwaF.js";import"./GraphShaderModule-Br7Mc9ee.js";import"./Program-BnRiu9Jn.js";import"./BufferObject-CpPfoGN6.js";import"./LabelMetric-D4A1Qpx6.js";import"./VertexElementDescriptor-BOD-G50G.js";import"./BoundingBox-CdqmOd9a.js";import"./ShaderBuilder-C9rXjjS7.js";import"./BindType-BBwFZqyN.js";import"./TileContainer-Clr4cLMC.js";import"./WGLContainer-DqoEBBZm.js";import"./ProgramTemplate-mWljJ0Gj.js";import"./VertexArrayObject-CP7hxzKB.js";import"./vec3f32-nZdmKIgz.js";import"./StyleDefinition-IBwlag_H.js";import"./config-MDUrh2eL.js";import"./earcut-Lltz9D9k.js";import"./FeatureCommandQueue-CgYMWU8U.js";import"./CIMSymbolHelper-CR6Aus0U.js";import"./BidiEngine-DNnuvc1i.js";import"./fontUtils-OnKrmk1k.js";import"./GeometryUtils-CaFOaic2.js";import"./rasterizingUtils-nHR3JRad.js";import"./floatRGBA-ol_XST_i.js";import"./Rect-CUzevAry.js";import"./Technique-BxlL133A.js";import"./streamLayerUtils-CKwt2uXH.js";import"./QueueProcessor-5m9Sycf7.js";import"./CircularArray-CujHzHWW.js";import"./featureReductionUtils-Caulfaw_.js";import"./SDFHelper-IKHUOHNS.js";import"./constants-B4mRqufT.js";import"./parquet-CduVu79T.js";import"./floorFilterUtils-DZ5C6FQv.js";import"./popupUtils-C8sCcjvA.js";import"./RefreshableLayerView-CQ4Cowrg.js";let i=class extends g{initialize(){this.addHandles([d(()=>this.view.scale,()=>this._update(),u)],"constructor")}isUpdating(){const t=this.layer.sublayers.some(a=>a.renderer!=null),r=this._commandsQueue.updateTracking.updating,o=this._updatingRequiredPromise!=null,p=!this._workerProxy,m=this.dataUpdating,e=t&&(r||o||p||m);return l("esri-2d-log-updating")&&console.log(`Updating FLV2D: ${e}
  -> hasRenderer ${t}
  -> hasPendingCommand ${r}
  -> updatingRequiredFields ${o}
  -> updatingProxy ${p}
  -> updatingPipeline ${m}
`),e}};i=s([n("esri.views.2d.layers.SubtypeGroupLayerView2D")],i);const ni=i;export{ni as default};
