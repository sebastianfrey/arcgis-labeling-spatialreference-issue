import{as as p,b as m,aQ as s}from"./index-BFudLC3v.js";import{p as a}from"./MeshVertexAttributes-BEPVNNuH.js";import{B as n}from"./vertexSpaceConversion-BRCt4oVP.js";import"./meshProperties-C4iW0Ukm.js";import"./mat3f64-q3fE-ZOt.js";import"./mat4f64-Dk4dwAN8.js";import"./spatialReferenceEllipsoidUtils-CtUb4seQ.js";import"./computeTranslationToOriginAndRotation-CO062Ozn.js";import"./projectPointToVector-vOnznfs-.js";import"./meshVertexSpaceUtils-DPDdFFVl.js";import"./MeshLocalVertexSpace-BtSCYr6y.js";import"./vec3-D4VoXKyn.js";import"./BufferView-CTWL5g6z.js";import"./vec4-BYRx93JH.js";async function M(t,o,r){await Promise.resolve(),p(r);const e=n(t,o,{useEllipsoid:r==null?void 0:r.useEllipsoid});if(!e)throw new m("meshUtils:convertVertexSpace()","Failed to convert to provided vertex space due to projection errors");const i=t.cloneAndModifyVertexAttributes(new a({...e,uv:s(t.vertexAttributes.uv),color:s(t.vertexAttributes.color)}),o);return i.transform=null,i}export{M as convertMeshVertexSpace};
