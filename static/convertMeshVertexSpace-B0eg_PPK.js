import{as as p,b as m,aQ as s}from"./index-Cf67L9ml.js";import{p as a}from"./MeshVertexAttributes-C3NYIwMd.js";import{B as n}from"./vertexSpaceConversion-CSxngN1x.js";import"./meshProperties-C4iW0Ukm.js";import"./mat3f64-q3fE-ZOt.js";import"./mat4f64-Dk4dwAN8.js";import"./spatialReferenceEllipsoidUtils-CVi6cHf_.js";import"./computeTranslationToOriginAndRotation-B3nIFk4k.js";import"./projectPointToVector-BSS7uX7z.js";import"./meshVertexSpaceUtils-yusu8Jvp.js";import"./MeshLocalVertexSpace-1m3iQoyf.js";import"./vec3-Cw6vvO7a.js";import"./BufferView-Cu1yI3AK.js";import"./vec4-D6q67qA1.js";async function M(t,o,r){await Promise.resolve(),p(r);const e=n(t,o,{useEllipsoid:r==null?void 0:r.useEllipsoid});if(!e)throw new m("meshUtils:convertVertexSpace()","Failed to convert to provided vertex space due to projection errors");const i=t.cloneAndModifyVertexAttributes(new a({...e,uv:s(t.vertexAttributes.uv),color:s(t.vertexAttributes.color)}),o);return i.transform=null,i}export{M as convertMeshVertexSpace};
