import{aY as Z,b as C,ca as Y,cb as b,cc as tt,cd as et,a_ as nt,am as _,ce as st,cf as at,cg as it}from"./index-DKbcOXvO.js";function B(t){if(!t)return null;const n=t.wkid;if(n)return tt[n];const e=t.wkt2??t.wkt;return e?ot(e):null}function ot(t){const n=et.exec(t);if(!n||n.length!==2)return null;const e=n[1].split(",");if(!e||e.length<3)return null;const h=parseFloat(e[1]),s=parseFloat(e[2]);return isNaN(h)||isNaN(s)?null:{a:h,f:s===0?0:1/s}}function G(t){const n=B(t);if(rt(n))return n;const e=n.a*(1-n.f);return Object.assign(n,{b:e,eSq:1-(e/n.a)**2,radius:(2*n.a+e)/3,densificationRatio:1e4/((2*n.a+e)/3)})}function rt(t){return t!=null&&"b"in t&&"eSq"in t&&"radius"in t}function E(t,n,e){const{a:h,eSq:s}=G(e),a=Math.sqrt(s),i=Math.sin(n[1]*b),l=h*n[0]*b;let r;return s>0?r=h*((1-s)*(i/(1-s*(i*i))-1/(2*a)*Math.log((1-a*i)/(1+a*i))))*.5:r=h*i,t[0]=l,t[1]=r,t}function I(t){return Z(t)&&!!B(t)}function lt(t,n="square-meters"){if(t.some(i=>!I(i.spatialReference)))throw new C("geodesic-areas:invalid-spatial-reference","the input geometries spatial reference is not supported");const e=[];for(let i=0;i<t.length;i++){const l=t[i],r=l.spatialReference,{radius:c,densificationRatio:u}=G(r),o=c*u;e.push(ct(l,o))}const h=[],s=[0,0],a=[0,0];for(let i=0;i<e.length;i++){const{rings:l,spatialReference:r}=e[i];let c=0;for(let u=0;u<l.length;u++){const o=l[u];E(s,o[0],r),E(a,o[o.length-1],r);let M=a[0]*s[1]-s[0]*a[1];for(let d=0;d<o.length-1;d++)E(s,o[d+1],r),E(a,o[d],r),M+=a[0]*s[1]-s[0]*a[1];c+=M}c=Y(c,"square-meters",n),h.push(c/-2)}return h}function ut(t,n="meters"){if(!t)throw new C("geodesic-lengths:invalid-geometries","the input geometries type is not supported");if(t.some(h=>!I(h.spatialReference)))throw new C("geodesic-lengths:invalid-spatial-reference","the input geometries spatial reference is not supported");const e=[];for(let h=0;h<t.length;h++){const s=t[h],{spatialReference:a}=s,i=s.type==="polyline"?s.paths:s.rings;let l=0;for(let r=0;r<i.length;r++){const c=i[r];let u=0;for(let o=1;o<c.length;o++){const M=c[o-1][0],d=c[o][0],m=c[o-1][1],g=c[o][1];if(m!==g||M!==d){const p=new D;H(p,[M,m],[d,g],a),u+=p.distance}}l+=u}l=Y(l,"meters",n),e.push(l)}return e}function ct(t,n){if(t.type!=="polyline"&&t.type!=="polygon")throw new C("geodesic-densify:invalid-geometry","the input geometry is neither polyline nor polygon");const{spatialReference:e}=t;if(!I(e))throw new C("geodesic-densify:invalid-spatial-reference","the input geometry spatial reference is not supported");const h=t.type==="polyline"?t.paths:t.rings,s=[],a=[0,0],i=new D;for(const r of h){const c=[];s.push(c),c.push([r[0][0],r[0][1]]);let u,o,M=r[0][0],d=r[0][1];for(let m=0;m<r.length-1;m++){if(u=r[m+1][0],o=r[m+1][1],M===u&&d===o)continue;const g=[M,d];H(i,[M,d],[u,o],e);const{azimuth:p,distance:v}=i,w=v/n;if(w>1){for(let S=1;S<=w-1;S++)U(a,g,p,S*n,e),c.push(a.slice());U(a,g,p,(v+Math.floor(w-1)*n)/2,e),c.push(a.slice())}U(a,g,p,v,e),c.push(a.slice()),M=a[0],d=a[1]}}const l=st(_,e);return t.type==="polyline"?new at({paths:s,spatialReference:l}):new it({rings:s,spatialReference:l})}class D{constructor(n=0,e=void 0,h=void 0){this.distance=n,this.azimuth=e,this.reverseAzimuth=h}}function U(t,n,e,h,s){const a=n[0],i=n[1],l=a*b,r=i*b,c=(e??0)*b,{a:u,b:o,f:M}=G(s),d=Math.sin(c),m=Math.cos(c),g=(1-M)*Math.tan(r),p=1/Math.sqrt(1+g*g),v=g*p,w=Math.atan2(g,m),S=p*d,j=S*S,q=1-j,f=q*(u*u-o*o)/(o*o),k=1+f/16384*(4096+f*(f*(320-175*f)-768)),x=f/1024*(256+f*(f*(74-47*f)-128));let R,A,y,z=h/(o*k),F=2*Math.PI;for(;Math.abs(z-F)>1e-12;)y=Math.cos(2*w+z),R=Math.sin(z),A=Math.cos(z),F=z,z=h/(o*k)+x*R*(y+x/4*(A*(2*y*y-1)-x/6*y*(4*R*R-3)*(4*y*y-3)));const N=v*R-p*A*m,$=Math.atan2(v*A+p*R*m,(1-M)*Math.sqrt(j+N*N)),P=M/16*q*(4+M*(4-3*q)),O=Math.atan2(R*d,p*A-v*R*m)-(1-P)*M*S*(z+P*R*(y+P*A*(2*y*y-1)));return t[0]=(l+O)/b,t[1]=$/b,t}function H(t,n,e,h){const s=n[0]*b,a=n[1]*b,i=e[0]*b,l=e[1]*b,{a:r,b:c,f:u,radius:o}=G(h),M=i-s,d=Math.atan((1-u)*Math.tan(a)),m=Math.atan((1-u)*Math.tan(l)),g=Math.sin(d),p=Math.cos(d),v=Math.sin(m),w=Math.cos(m);let S,j,q,f,k,x,R,A,y,z,F=1e3,N=M;do{if(R=Math.sin(N),A=Math.cos(N),q=Math.sqrt(w*R*(w*R)+(p*v-g*w*A)*(p*v-g*w*A)),q===0)return t.distance=0,t.azimuth=void 0,t.reverseAzimuth=void 0,t;k=g*v+p*w*A,x=Math.atan2(q,k),y=p*w*R/q,j=1-y*y,f=k-2*g*v/j,isNaN(f)&&(f=0),z=u/16*j*(4+u*(4-3*j)),S=N,N=M+(1-z)*u*y*(x+z*q*(f+z*k*(2*f*f-1)))}while(Math.abs(N-S)>1e-12&&--F>0);if(F===0){const L=o,Q=Math.acos(Math.sin(a)*Math.sin(l)+Math.cos(a)*Math.cos(l)*Math.cos(i-s))*L,W=i-s,T=Math.sin(W)*Math.cos(l),V=Math.cos(a)*Math.sin(l)-Math.sin(a)*Math.cos(l)*Math.cos(W),X=Math.atan2(T,V);return t.azimuth=X/b,t.distance=Q,t.reverseAzimuth=void 0,t}const $=j*(r*r-c*c)/(c*c),P=$/1024*(256+$*($*(74-47*$)-128)),O=c*(1+$/16384*(4096+$*($*(320-175*$)-768)))*(x-P*q*(f+P/4*(k*(2*f*f-1)-P/6*f*(4*q*q-3)*(4*f*f-3)))),J=Math.atan2(w*Math.sin(N),p*v-g*w*Math.cos(N)),K=Math.atan2(p*Math.sin(N),p*v*Math.cos(N)-g*w);return t.azimuth=J/b,t.distance=O,t.reverseAzimuth=K/b,t}function ft(t){return I(t)?t:nt(t)?_.WGS84:null}export{ft as N,ut as R,D as b,U as j,H as q,lt as v,I as y};
