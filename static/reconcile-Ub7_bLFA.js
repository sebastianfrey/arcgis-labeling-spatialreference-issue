import{W as t,Z as r,ap as v,aF as w,b as c,aE as y,eT as f,eU as g,a4 as j}from"./index-BFudLC3v.js";import{r as P}from"./serverVersionUtils-DYOH3JJE.js";let o=class extends w{constructor(e){super(e),this.hasConflicts=!1,this.moment=null,this.didPost=!1,this.success=!1}};t([r({type:Boolean,json:{write:!0}})],o.prototype,"hasConflicts",void 0),t([r({type:Date,json:{type:Number,write:{writer:(e,s)=>{s.moment=e?e.getTime():null}}}})],o.prototype,"moment",void 0),t([r({type:Boolean,json:{write:!0}})],o.prototype,"didPost",void 0),t([r({type:Boolean,json:{write:!0}})],o.prototype,"success",void 0),o=t([v("esri.rest.versionManagement.gdbVersion.support.ReconcileResult")],o);const S=o,n=new Map;async function B(e,s,p,l){n.has(e)||await P(n,e);const i=n.get(e);if(((i==null?void 0:i.serverVersion)??0)<=11.1)throw new c("reconcile:enterprise-version","versioning API requires ArcGIS Enterprise version 11.2 or higher");if(!s)throw new c("reconcile:missing-guid","guid for version is missing");const a=y(e),h=p.toJSON(),m=f(a.query,{query:g({...h,f:"json"}),...l,method:"post"});s.startsWith("{")&&(s=s.slice(1,-1));const u=`${a.path}/versions/${s}/reconcile`,{data:d}=await j(u,m);return S.fromJSON(d)}export{B as reconcile,n as serverVersionCacheMap};
