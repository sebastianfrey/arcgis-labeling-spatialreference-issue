import{ar as p,s as m,az as s}from"./index-Dc2kMMi_.js";import{p as a}from"./MeshVertexAttributes-8QbNZhqp.js";import{B as n}from"./vertexSpaceConversion-CcuBlIRs.js";import"./mat3f64-q3fE-ZOt.js";import"./mat4f64-CSKppSlJ.js";import"./spatialReferenceEllipsoidUtils-D72atvxW.js";import"./computeTranslationToOriginAndRotation-C_1CYyk2.js";import"./projectPointToVector-Bm0S2zMq.js";import"./meshVertexSpaceUtils-C4wFKkl_.js";import"./MeshLocalVertexSpace-DoCW1AnK.js";import"./vec3-DyRn4nkJ.js";import"./BufferView-BL6uRKg_.js";import"./vec4-BJkFelv6.js";async function E(r,o,t){await Promise.resolve(),p(t);const e=n(r,o,{useEllipsoid:t==null?void 0:t.useEllipsoid});if(!e)throw new m("meshUtils:convertVertexSpace()","Failed to convert to provided vertex space due to projection errors");const i=r.cloneAndModifyVertexAttributes(new a({...e,uv:s(r.vertexAttributes.uv),color:s(r.vertexAttributes.color)}),o);return i.transform=null,i}export{E as convertMeshVertexSpace};
