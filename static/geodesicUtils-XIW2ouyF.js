import{aI as _,s as C,by as H,bz as z,bA as tt,bB as et,aK as nt,bC as J,bD as st,bE as at,bF as it}from"./index-BPaEurMl.js";function L(t){if(!t)return null;const n=t.wkid;if(n)return tt[n];const e=t.wkt2??t.wkt;return e?ot(e):null}function ot(t){const n=et.exec(t);if(!n||n.length!==2)return null;const e=n[1].split(",");if(!e||e.length<3)return null;const c=parseFloat(e[1]),s=parseFloat(e[2]);return isNaN(c)||isNaN(s)?null:{a:c,f:s===0?0:1/s}}function G(t){const n=L(t);if(rt(n))return n;const e=n.a*(1-n.f);return Object.assign(n,{b:e,eSq:1-(e/n.a)**2,radius:(2*n.a+e)/3,densificationRatio:1e4/((2*n.a+e)/3)})}function rt(t){return t!=null&&"b"in t&&"eSq"in t&&"radius"in t}function E(t,n,e){const{a:c,eSq:s}=G(e),a=Math.sqrt(s),i=Math.sin(n[1]*z),l=c*n[0]*z;let r;return s>0?r=c*((1-s)*(i/(1-s*(i*i))-1/(2*a)*Math.log((1-a*i)/(1+a*i))))*.5:r=c*i,t[0]=l,t[1]=r,t}function O(t){return _(t)&&!!L(t)}function lt(t,n="square-meters"){if(t.some(i=>!O(i.spatialReference)))throw new C("geodesic-areas:invalid-spatial-reference","the input geometries spatial reference is not supported");const e=[];for(let i=0;i<t.length;i++){const l=t[i],r=l.spatialReference,{radius:h,densificationRatio:u}=G(r),o=h*u;e.push(ht(l,o))}const c=[],s=[0,0],a=[0,0];for(let i=0;i<e.length;i++){const{rings:l,spatialReference:r}=e[i];let h=0;for(let u=0;u<l.length;u++){const o=l[u];E(s,o[0],r),E(a,o[o.length-1],r);let M=a[0]*s[1]-s[0]*a[1];for(let d=0;d<o.length-1;d++)E(s,o[d+1],r),E(a,o[d],r),M+=a[0]*s[1]-s[0]*a[1];h+=M}h=H(h,"square-meters",n),c.push(h/-2)}return c}function ut(t,n="meters"){if(!t)throw new C("geodesic-lengths:invalid-geometries","the input geometries type is not supported");if(t.some(c=>!O(c.spatialReference)))throw new C("geodesic-lengths:invalid-spatial-reference","the input geometries spatial reference is not supported");const e=[];for(let c=0;c<t.length;c++){const s=t[c],{spatialReference:a}=s,i=s.type==="polyline"?s.paths:s.rings;let l=0;for(let r=0;r<i.length;r++){const h=i[r];let u=0;for(let o=1;o<h.length;o++){const M=h[o-1][0],d=h[o][0],m=h[o-1][1],g=h[o][1];if(m!==g||M!==d){const p=new Q;T(p,[M,m],[d,g],a),u+=p.distance}}l+=u}l=H(l,"meters",n),e.push(l)}return e}function ht(t,n){if(t.type!=="polyline"&&t.type!=="polygon")throw new C("geodesic-densify:invalid-geometry","the input geometry is neither polyline nor polygon");const{spatialReference:e}=t;if(!O(e))throw new C("geodesic-densify:invalid-spatial-reference","the input geometry spatial reference is not supported");const c=t.type==="polyline"?t.paths:t.rings,s=[],a=[0,0],i=new Q;for(const r of c){const h=[];s.push(h),h.push([r[0][0],r[0][1]]);let u,o,M=r[0][0],d=r[0][1];for(let m=0;m<r.length-1;m++){if(u=r[m+1][0],o=r[m+1][1],M===u&&d===o)continue;const g=[M,d];T(i,[M,d],[u,o],e);const{azimuth:p,distance:b}=i,y=b/n;if(y>1){for(let S=1;S<=y-1;S++)K(a,g,p,S*n,e),h.push(a.slice());K(a,g,p,(b+Math.floor(y-1)*n)/2,e),h.push(a.slice())}K(a,g,p,b,e),h.push(a.slice()),M=a[0],d=a[1]}}const l=st(J,e);return t.type==="polyline"?new at({paths:s,spatialReference:l}):new it({rings:s,spatialReference:l})}class Q{constructor(n=0,e=void 0,c=void 0){this.distance=n,this.azimuth=e,this.reverseAzimuth=c}}function K(t,n,e,c,s){const a=n[0],i=n[1],l=a*z,r=i*z,h=(e??0)*z,{a:u,b:o,f:M}=G(s),d=Math.sin(h),m=Math.cos(h),g=(1-M)*Math.tan(r),p=1/Math.sqrt(1+g*g),b=g*p,y=Math.atan2(g,m),S=p*d,F=S*S,R=1-F,f=R*(u*u-o*o)/(o*o),I=1+f/16384*(4096+f*(f*(320-175*f)-768)),j=f/1024*(256+f*(f*(74-47*f)-128));let v,N,w,x,k=c/(o*I),q=2*Math.PI;for(;Math.abs(k-q)>1e-12;)w=Math.cos(2*y+k),v=Math.sin(k),N=Math.cos(k),x=j*v*(w+j/4*(N*(2*w*w-1)-j/6*w*(4*v*v-3)*(4*w*w-3))),q=k,k=c/(o*I)+x;const A=b*v-p*N*m,P=Math.atan2(b*N+p*v*m,(1-M)*Math.sqrt(F+A*A)),U=Math.atan2(v*d,p*N-b*v*m),$=M/16*R*(4+M*(4-3*R)),B=P/z,D=(l+(U-(1-$)*M*S*(k+$*v*(w+$*N*(2*w*w-1)))))/z;return t[0]=D,t[1]=B,t}function T(t,n,e,c){const s=n[0]*z,a=n[1]*z,i=e[0]*z,l=e[1]*z,{a:r,b:h,f:u,radius:o}=G(c),M=i-s,d=Math.atan((1-u)*Math.tan(a)),m=Math.atan((1-u)*Math.tan(l)),g=Math.sin(d),p=Math.cos(d),b=Math.sin(m),y=Math.cos(m);let S,F,R,f,I,j,v,N,w,x,k=1e3,q=M;do{if(v=Math.sin(q),N=Math.cos(q),R=Math.sqrt(y*v*(y*v)+(p*b-g*y*N)*(p*b-g*y*N)),R===0)return t.distance=0,t.azimuth=void 0,t.reverseAzimuth=void 0,t;I=g*b+p*y*N,j=Math.atan2(R,I),w=p*y*v/R,F=1-w*w,f=I-2*g*b/F,isNaN(f)&&(f=0),x=u/16*F*(4+u*(4-3*F)),S=q,q=M+(1-x)*u*w*(j+x*R*(f+x*I*(2*f*f-1)))}while(Math.abs(q-S)>1e-12&&--k>0);if(k===0){const D=o,V=Math.acos(Math.sin(a)*Math.sin(l)+Math.cos(a)*Math.cos(l)*Math.cos(i-s))*D,W=i-s,X=Math.sin(W)*Math.cos(l),Y=Math.cos(a)*Math.sin(l)-Math.sin(a)*Math.cos(l)*Math.cos(W),Z=Math.atan2(X,Y);return t.azimuth=Z/z,t.distance=V,t.reverseAzimuth=void 0,t}const A=F*(r*r-h*h)/(h*h),P=A/1024*(256+A*(A*(74-47*A)-128)),U=h*(1+A/16384*(4096+A*(A*(320-175*A)-768)))*(j-P*R*(f+P/4*(I*(2*f*f-1)-P/6*f*(4*R*R-3)*(4*f*f-3)))),$=Math.atan2(y*Math.sin(q),p*b-g*y*Math.cos(q)),B=Math.atan2(p*Math.sin(q),p*b*Math.cos(q)-g*y);return t.azimuth=$/z,t.distance=U,t.reverseAzimuth=B/z,t}function ft(t){return O(t)?t:nt(t)?J.WGS84:null}export{ft as N,ut as R,Q as b,K as j,T as q,lt as v,O as y};
