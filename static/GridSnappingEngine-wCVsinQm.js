import{bV as O,bk as U,i0 as E,ed as F,i1 as W,ak as X,ca as Y,i2 as k,W as o,Z as p,ap as D,i3 as G}from"./index-DKbcOXvO.js";import{l as H,u as I,t as T}from"./gridUtils-B1A0JXH3.js";import{f as g,d as Z,c as _}from"./hitTestSelectUtils-CkGBTzVC.js";import{r as V,a as q}from"./RouteLayerInteraction-DV8wnpfP.js";import"./geodesicUtils-qqRD-wDL.js";import"./quantityUtils-BFFWDfuz.js";import"./projectVectorToVector-CtKuyuW7.js";import"./projectPointToVector-CdtaoGVc.js";import"./plane-C84JDLPg.js";import"./mat3f64-q3fE-ZOt.js";import"./mat4f64-Dk4dwAN8.js";import"./quatf64-aQ5IuZRd.js";import"./sphere-BrZ4XJaF.js";import"./elevationInfoUtils-CUMdQU0C.js";import"./GraphicsLayer-HECLGpvo.js";import"./Stop-LknFKVkR.js";import"./networkEnums-BSGBazXj.js";let s=class extends O{constructor(t){super(t),this.options=null}destroy(){this._set("options",null)}get grid(){return this.view.grid}get effectiveViewRotation(){var t;return(t=this.grid)!=null&&t.rotateWithMap?0:U(this.view.rotation??0)}get gridRotation(){var t;return U(((t=this.grid)==null?void 0:t.rotation)??0)}get gridCenter(){var e;const{spatialReference:t,grid:i}=this;if(!i||!t||!E(i.center.spatialReference,t))return null;try{const r=F(i.center,t),n=t.isWrappable&&((e=this.view)==null?void 0:e.center)!=null?W(r.x,this.view.center.x,t):r.x;return g(n,r.y,r.z)}catch(r){return X.getLogger(this).errorOnce("Grid Snapping - Failed to project grid center.",r),null}}get offsetScaleFactor(){const{pixelsPerStride:t,grid:i}=this;if(!i||!t)return 1;const{majorLineInterval:e,dynamicScaling:r}=i;return e<1?null:H(e,t,r)}get spatialReference(){return this.view.spatialReference}get gridMetersPerStride(){const{grid:t}=this;return t?Y(t.spacing,t.units,"meters"):null}get viewMetersPerPixel(){const{viewMetersPerSRUnit:t}=this;return t==null?null:t*k(this.view.scale,this.view.spatialReference)}get viewMetersPerSRUnit(){const{spatialReference:t}=this.view;return this.gridCenter?I(this.gridCenter[0],this.gridCenter[1],t):null}get pixelsPerStride(){const{gridMetersPerStride:t,viewMetersPerPixel:i}=this;return i&&t?t/i:null}get updating(){return this.grid!=null&&this.spatialReference!=null&&this.viewMetersPerSRUnit==null}async fetchCandidates(t,i,e){var u;const{options:r,view:n}=this;if(!(r!=null&&r.effectiveGridEnabled)||!n.grid||(u=e.feature)!=null&&u.attributes&&Z in e.feature.attributes)return[];const a=e.coordinateHelper.arrayToPoint(t),l=r.distance*(e.pointer==="touch"?r.touchSensitivityMultiplier:1);return this.fetchCandidatesSync(a,l)}fetchCandidatesSync(t,i){const e=[],{grid:r,effectiveViewRotation:n,gridRotation:a,gridCenter:l,viewMetersPerPixel:u,viewMetersPerSRUnit:h,offsetScaleFactor:v,spatialReference:f,gridMetersPerStride:C,pixelsPerStride:$}=this;if(!(r&&u&&h&&l&&f&&v&&C&&$)||!r.dynamicScaling&&$<T||!E(t.spatialReference,f))return e;const y=F(t,f),z=g(y.x,y.y,y.z),c=S(z,-a,l,-n),P=C/h*v,d=A(c,P,l),{shouldSnapX:w,shouldSnapY:m}=B(d,c,i,u,h);if(!w&&!m)return[];const L=g((w?d:c)[0],(m?d:c)[1]),M=S(L,a,l,n),b=S(d,a,l,n);if(m){const R=j(d,c,P,"y"),x=S(R,a,l,n);e.push(new V({lineStart:b,lineEnd:x,targetPoint:M,isDraped:!1}))}if(w){const R=j(d,c,P,"x"),x=S(R,a,l,n);e.push(new V({lineStart:b,lineEnd:x,targetPoint:M,isDraped:!1}))}return w&&m&&e.push(new q(M,e[0],e[1],!1)),e}};o([p({constructOnly:!0})],s.prototype,"view",void 0),o([p()],s.prototype,"options",void 0),o([p()],s.prototype,"grid",null),o([p()],s.prototype,"effectiveViewRotation",null),o([p()],s.prototype,"gridRotation",null),o([p()],s.prototype,"gridCenter",null),o([p()],s.prototype,"offsetScaleFactor",null),o([p()],s.prototype,"spatialReference",null),o([p()],s.prototype,"gridMetersPerStride",null),o([p()],s.prototype,"viewMetersPerPixel",null),o([p()],s.prototype,"viewMetersPerSRUnit",null),o([p()],s.prototype,"pixelsPerStride",null),o([p()],s.prototype,"updating",null),s=o([D("esri.views.interactive.snapping.GridSnappingEngine")],s);const S=(t,i,e,r)=>{const n=_(t[0],t[1],t[2]);return G(n,G(n,n,e,i),e,r)},A=(t,i,e)=>{const r=(t[0]-e[0])/i,n=(t[1]-e[1])/i,a=Math.trunc(r),l=Math.trunc(n),u=Math.round(r%1),h=Math.round(n%1),v=e[0]+(a+u)*i,f=e[1]+(l+h)*i;return g(v,f)},B=(t,i,e,r,n)=>{if(r<=0)return{shouldSnapX:!1,shouldSnapY:!1};const a=(t[0]-i[0])/r,l=(t[1]-i[1])/r;return{shouldSnapX:Math.abs(a*n)<e,shouldSnapY:Math.abs(l*n)<e}},j=(t,i,e,r)=>{if(r==="y"){const a=i[0]>t[0]?1:-1;return g(t[0]+e*a,t[1])}const n=i[1]>t[1]?1:-1;return g(t[0],t[1]+e*n)};export{s as GridSnappingEngine};
