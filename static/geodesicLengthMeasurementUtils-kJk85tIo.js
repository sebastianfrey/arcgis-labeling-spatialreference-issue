import{a as s}from"./quantityUtils-BqZKwIL9.js";import{a_ as i,av as m,aG as u}from"./index-Cf67L9ml.js";import{geodesicLength as f}from"./geometryEngine-D2SVCczb.js";import{y as c,q as l,R as y,b as R}from"./geodesicUtils-D1DPj1dv.js";function w(e){return c(e)||i(e)}function p(e,n,r,...o){return c(e)?n.apply(void 0,o):i(e)?r.apply(void 0,o):null}function G(e){const{spatialReference:n}=e;return p(n,v,x,e)}function L(e,n){if(!m(e.spatialReference,n.spatialReference))return null;const{spatialReference:r}=e;return t[0]=e.x,t[1]=e.y,t[2]=e.hasZ?e.z:0,a[0]=n.x,a[1]=n.y,a[2]=n.hasZ?n.z:0,d(t,a,r)}function d(e,n,r){return p(r,h,g,e,n,r)}function h(e,n,r){return s(l(z,e,n,r).distance,"meters")}function g(e,n,r){return s(f($(e,n,r),"meters"),"meters")}function v(e){return s(y([e],"meters")[0],"meters")}function x(e){return s(f(e,"meters"),"meters")}function $(e,n,r){return{type:"polyline",spatialReference:r,paths:[[[...e],[...n]]]}}const z=new R,t=u(),a=u();export{w as e,L as f,G as m,p as r,d as u};
