import{W as s,Z as i,am as h,ap as d,aF as g,ge as n,fy as p,bt as S,aE as y,eT as R,a4 as w,jx as j}from"./index-DKbcOXvO.js";let e=class extends g{constructor(o){super(o),this.geometries=[],this.outSpatialReference=null,this.transformation=null,this.transformForward=null}toJSON(){const o=this.geometries.map(a=>a.toJSON()),t=this.geometries[0],r={};return r.outSR=n(this.outSpatialReference),r.inSR=n(t.spatialReference),r.geometries=JSON.stringify({geometryType:p(t),geometries:o}),this.transformation&&(r.transformation=this.transformation.wkid||JSON.stringify(this.transformation)),this.transformForward!=null&&(r.transformForward=this.transformForward),r}};s([i()],e.prototype,"geometries",void 0),s([i({type:h,json:{read:{source:"outSR"}}})],e.prototype,"outSpatialReference",void 0),s([i()],e.prototype,"transformation",void 0),s([i()],e.prototype,"transformForward",void 0),e=s([d("esri.rest.support.ProjectParameters")],e);const F=e,$=S(F);async function J(o,t,r){t=$(t);const a=y(o),f={...a.query,f:"json",...t.toJSON()},m=t.outSpatialReference,c=p(t.geometries[0]),u=R(f,r);return w(a.path+"/project",u).then(({data:{geometries:l}})=>j(l,c,m))}export{F as m,J as n};
