import{W as r,kx as T,ky as X,kz as R,ea as Y,bD as j,cj as J,kb as V,bL as Z,kc as tt,kd as et,ke as st,kf as ot,cl as it,kg as rt,kh as at,co as nt,kA as pt,kB as L}from"./index-DKbcOXvO.js";import{r as dt}from"./vec3f32-nZdmKIgz.js";import{n as ht}from"./WGLContainer-Bfqd03g2.js";import{o as lt}from"./FeatureCommandQueue-B-LyAB3g.js";import{t as B}from"./utils-ehcGqGxa.js";import{t as ct}from"./Technique-UXOeImSB.js";import{h as G,g as n,m as U,C as ut,a as x,P as q,r as ft,_ as E,U as vt,j as mt,p as yt,X as wt,Y as xt,b as gt,v as _t,w as Mt,e as $t}from"./GraphShaderModule-DC334t3a.js";import{t as W}from"./VertexElementDescriptor-BOD-G50G.js";class P extends ut{}r([G(0,x)],P.prototype,"pos",void 0),r([G(1,x)],P.prototype,"uv",void 0);class St extends _t{}class N extends q{}r([n(ft)],N.prototype,"dvs",void 0);class m extends q{}r([n(x)],m.prototype,"perspective",void 0),r([n(x)],m.prototype,"texSize",void 0),r([n(E)],m.prototype,"wrapAroundShift",void 0),r([n(E)],m.prototype,"opacity",void 0),r([n(vt)],m.prototype,"texture",void 0);class w extends mt{vertex(e){const t=e.uv.divide(this.config.texSize),s=new E(1).add(yt(t,this.config.perspective)),o=new wt(e.pos.add(new x(this.config.wrapAroundShift,0)),1),i=this.transform.dvs.multiply(o);return{uv:t,glPosition:new xt(i.xy.multiply(s),0,s)}}fragment(e){const t=gt(this.config.texture,e.uv).multiply(this.config.opacity),s=new Mt;return s.fragColor=t,s}}r([n(N)],w.prototype,"transform",void 0),r([n(m)],w.prototype,"config",void 0),r([T(0,U(P))],w.prototype,"vertex",null),r([T(0,U(St))],w.prototype,"fragment",null);class bt extends ct{constructor(){super(...arguments),this.type=$t.Overlay,this._mesh=null,this.shaders={overlay:new w}}render(e,t){const{context:s,painter:o}=e,i=this._getMesh(e,t);o.setPipelineState(B);const{isWrapAround:p,wrapAroundShift:c}=t.config,u={...t.config,wrapAroundShift:0},f={shader:this.shaders.overlay,uniforms:{transform:t.transform,config:u},defines:null,optionalAttributes:null,useComputeBuffer:!1};o.setPipelineState({...B,stencil:{write:!1,test:{compare:X.EQUAL,op:{fail:R.KEEP,zFail:R.KEEP,zPass:R.REPLACE},ref:0,mask:255}}}),o.submitDrawMeshUntyped(s,f,i),p&&(u.wrapAroundShift=c,o.submitDrawMeshUntyped(s,f,i))}shutdown(){Y(this._mesh)}_getMesh(e,t){const{context:s}=e;if(this._mesh){const o=this._mesh.vertexBuffers.get("positions");if(!o)throw new Error("Buffer not found");o.buffer.setData(t.position)}else{const o=t.index!=null?t.index.length:t.position.length/2;this._mesh=new lt(s,{vertex:{positions:{data:t.position,attributes:[new W("pos",2,j.FLOAT,0,8)]},uvs:{data:t.tex,attributes:[new W("uv",2,j.UNSIGNED_SHORT,0,4)]}},index:t.index!=null?{index:{data:t.index}}:void 0,groups:[{index:t.index!=null?"index":void 0,primitive:J.TRIANGLE_STRIP}],parts:[{group:0,start:0,count:o}]})}return this._mesh}}class Dt extends ht{constructor(){super(...arguments),this._viewStateId=-1,this._dvsMat3=V(),this._overlayTechnique=new bt}get dvsMat3(){return this._dvsMat3}beforeRender(e){this._updateMatrices(e),this._updateOverlays(e,this.children);for(const t of this.children)t.beforeRender(e)}doRender(e){if(e.drawPhase!==Z.MAP||!this.visible)return;super.doRender(e);const t=this._overlayTechnique;for(const s of this.children)s.draw(e,t)}onDetach(){this._overlayTechnique.shutdown()}_updateMatrices(e){const{state:t}=e,{id:s,size:o,pixelRatio:i,resolution:p,rotation:c,viewpoint:u,displayMat3:f}=t;if(this._viewStateId===s)return;const g=L(c),d=i*o[0],v=i*o[1];this._localOrigin=u.targetGeometry.clone();const{x:y,y:$}=this._localOrigin,_=tt(y,t.spatialReference);this._localOrigin.x=_,this._localOrigin.y=$;const S=p*d,b=p*v,a=et(this._dvsMat3);st(a,a,f),ot(a,a,it(d/2,v/2)),rt(a,a,dt(d/S,-v/b,1)),at(a,a,-g),this._viewStateId=s}_updateOverlays(e,t){const{state:s}=e,{rotation:o,spatialReference:i,worldScreenWidth:p,size:c,viewpoint:u}=s,f=this._localOrigin;let g,d=0;const v=nt(i);if(v&&i.isWrappable){const y=c[0],$=c[1],_=L(o),S=Math.abs(Math.cos(_)),b=Math.abs(Math.sin(_)),a=Math.round(y*S+$*b),[z,C]=v.valid,h=pt(i),{x:D,y:F}=u.targetGeometry,K=[D,F],k=[0,0];s.toScreen(k,K);const M=[0,0];let A;A=a>p?.5*p:.5*a;const I=Math.floor((D+.5*h)/h),H=z+I*h,Q=C+I*h,O=[k[0]+A,0];s.toMap(M,O),M[0]>Q&&(d=h),O[0]=k[0]-A,s.toMap(M,O),M[0]<H&&(d=-h),g={worldWidth:h,xBounds:[z,C]}}for(const y of t)y.updateDrawCoords(f,d,i,g)}}export{Dt as u};
