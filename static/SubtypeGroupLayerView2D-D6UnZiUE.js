import{W as s,ap as n,a1 as d,e6 as u,a2 as l}from"./index-DKbcOXvO.js";import{d as g}from"./FeatureLayerView2D-CAyn5dKn.js";import"./EffectView-BCDYNzM0.js";import"./timeSupport-CGIvskhq.js";import"./AttributeBinsFeatureSet-CwxDCUav.js";import"./AttributeBinsQuery-fsjlXaIs.js";import"./queryUtils-hVslpV8d.js";import"./json-Wa8cmqdu.js";import"./FixedIntervalBinParameters-DNz8ezTp.js";import"./LayerView-CR04FL3M.js";import"./Container-CVGlnMw0.js";import"./layerViewUtils-CP8CZ9y0.js";import"./TechniqueInstance-Cni1MZ5F.js";import"./UpdateTracking2D-C6eAXqiy.js";import"./GraphShaderModule-DC334t3a.js";import"./Program-HYRYH4Rq.js";import"./BufferObject-Bzw_3oj2.js";import"./LabelMetric-J5NAbP5i.js";import"./VertexElementDescriptor-BOD-G50G.js";import"./BoundingBox-CmWUFtRO.js";import"./ShaderBuilder-CRNP-Ry9.js";import"./BindType-BBwFZqyN.js";import"./TileContainer-D2viBxzE.js";import"./WGLContainer-Bfqd03g2.js";import"./ProgramTemplate-BAdC4_dI.js";import"./VertexArrayObject-idG1FX9h.js";import"./vec3f32-nZdmKIgz.js";import"./StyleDefinition-Br81mLGK.js";import"./config-MDUrh2eL.js";import"./earcut-Lltz9D9k.js";import"./FeatureCommandQueue-B-LyAB3g.js";import"./CIMSymbolHelper-ul9lMn7I.js";import"./BidiEngine-DNnuvc1i.js";import"./fontUtils-BfBCIMfO.js";import"./GeometryUtils-k5V-R1K7.js";import"./rasterizingUtils-ZyXE8c0k.js";import"./floatRGBA-Drf6QmoK.js";import"./Rect-CUzevAry.js";import"./Technique-UXOeImSB.js";import"./streamLayerUtils-CKwt2uXH.js";import"./QueueProcessor-Bb2ObthY.js";import"./CircularArray-CujHzHWW.js";import"./featureReductionUtils-Caulfaw_.js";import"./SDFHelper-CfpJ3tmO.js";import"./constants-B4mRqufT.js";import"./parquet-BLQgPdQw.js";import"./floorFilterUtils-DZ5C6FQv.js";import"./popupUtils-DaKwuCLL.js";import"./RefreshableLayerView-BCbPuCmT.js";let i=class extends g{initialize(){this.addHandles([d(()=>this.view.scale,()=>this._update(),u)],"constructor")}isUpdating(){const t=this.layer.sublayers.some(a=>a.renderer!=null),r=this._commandsQueue.updateTracking.updating,o=this._updatingRequiredPromise!=null,p=!this._workerProxy,m=this.dataUpdating,e=t&&(r||o||p||m);return l("esri-2d-log-updating")&&console.log(`Updating FLV2D: ${e}
  -> hasRenderer ${t}
  -> hasPendingCommand ${r}
  -> updatingRequiredFields ${o}
  -> updatingProxy ${p}
  -> updatingPipeline ${m}
`),e}};i=s([n("esri.views.2d.layers.SubtypeGroupLayerView2D")],i);const ni=i;export{ni as default};
