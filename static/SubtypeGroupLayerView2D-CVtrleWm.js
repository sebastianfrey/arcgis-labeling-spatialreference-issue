import{W as s,ap as n,a1 as d,e6 as u,a2 as l}from"./index-Cf67L9ml.js";import{d as g}from"./FeatureLayerView2D-DEOUqjDI.js";import"./EffectView-CkK6NJdN.js";import"./timeSupport-GZPFng_t.js";import"./AttributeBinsFeatureSet-BtYL9xEk.js";import"./AttributeBinsQuery-BRUMkJFd.js";import"./queryUtils-Dzi_OLlA.js";import"./json-Wa8cmqdu.js";import"./FixedIntervalBinParameters-DfqzMF7w.js";import"./LayerView-zDsSwpRo.js";import"./Container-BEHKQm5A.js";import"./layerViewUtils-BErokGJI.js";import"./TechniqueInstance-CCmv-o_J.js";import"./UpdateTracking2D-CDp-gwTF.js";import"./GraphShaderModule-BenlGmbL.js";import"./Program-Dg5lKghI.js";import"./BufferObject-ea8Voym7.js";import"./LabelMetric-CH0T2PFZ.js";import"./VertexElementDescriptor-BOD-G50G.js";import"./BoundingBox-CUQpoh07.js";import"./ShaderBuilder-j36oj-lW.js";import"./BindType-BBwFZqyN.js";import"./TileContainer-BYB7DZDc.js";import"./WGLContainer-DmY4afwL.js";import"./ProgramTemplate-COOfBGP4.js";import"./VertexArrayObject-s3q2lkkQ.js";import"./vec3f32-nZdmKIgz.js";import"./StyleDefinition-C4puLFnb.js";import"./config-MDUrh2eL.js";import"./earcut-Lltz9D9k.js";import"./FeatureCommandQueue-BmnDBOIz.js";import"./CIMSymbolHelper-Cora_Njn.js";import"./BidiEngine-DNnuvc1i.js";import"./fontUtils-B55So5rc.js";import"./GeometryUtils-Cj1Ze3T6.js";import"./rasterizingUtils-heiW8PKS.js";import"./floatRGBA-18oZY0RD.js";import"./Rect-CUzevAry.js";import"./Technique-CLnQJYt5.js";import"./streamLayerUtils-CKwt2uXH.js";import"./QueueProcessor-CZ3qTN3S.js";import"./CircularArray-CujHzHWW.js";import"./featureReductionUtils-Caulfaw_.js";import"./SDFHelper-C2vrrSm6.js";import"./constants-B4mRqufT.js";import"./parquet-Bf6aOq6U.js";import"./floorFilterUtils-DZ5C6FQv.js";import"./popupUtils-BAVTkRsj.js";import"./RefreshableLayerView-Bo61xOD9.js";let i=class extends g{initialize(){this.addHandles([d(()=>this.view.scale,()=>this._update(),u)],"constructor")}isUpdating(){const t=this.layer.sublayers.some(a=>a.renderer!=null),r=this._commandsQueue.updateTracking.updating,o=this._updatingRequiredPromise!=null,p=!this._workerProxy,m=this.dataUpdating,e=t&&(r||o||p||m);return l("esri-2d-log-updating")&&console.log(`Updating FLV2D: ${e}
  -> hasRenderer ${t}
  -> hasPendingCommand ${r}
  -> updatingRequiredFields ${o}
  -> updatingProxy ${p}
  -> updatingPipeline ${m}
`),e}};i=s([n("esri.views.2d.layers.SubtypeGroupLayerView2D")],i);const ni=i;export{ni as default};
