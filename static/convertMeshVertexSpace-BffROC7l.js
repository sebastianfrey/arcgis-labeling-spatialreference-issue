import{as as p,b as m,aQ as s}from"./index-DKbcOXvO.js";import{p as a}from"./MeshVertexAttributes-Bv228uze.js";import{B as n}from"./vertexSpaceConversion-BzRKYr1N.js";import"./meshProperties-C4iW0Ukm.js";import"./mat3f64-q3fE-ZOt.js";import"./mat4f64-Dk4dwAN8.js";import"./spatialReferenceEllipsoidUtils-C9-_MkCK.js";import"./computeTranslationToOriginAndRotation-zNEjyUkY.js";import"./projectPointToVector-CdtaoGVc.js";import"./meshVertexSpaceUtils-CfGZx6xv.js";import"./MeshLocalVertexSpace-G-ckTliX.js";import"./vec3-BD8BDYjc.js";import"./BufferView-D2bmREm3.js";import"./vec4-Cb4Vvl8H.js";async function M(t,o,r){await Promise.resolve(),p(r);const e=n(t,o,{useEllipsoid:r==null?void 0:r.useEllipsoid});if(!e)throw new m("meshUtils:convertVertexSpace()","Failed to convert to provided vertex space due to projection errors");const i=t.cloneAndModifyVertexAttributes(new a({...e,uv:s(t.vertexAttributes.uv),color:s(t.vertexAttributes.color)}),o);return i.transform=null,i}export{M as convertMeshVertexSpace};
